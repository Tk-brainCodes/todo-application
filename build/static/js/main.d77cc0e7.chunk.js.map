{"version":3,"sources":["todo-app/hooks/useToggleState.js","todo-app/hooks/useInputState.js","todo-app/editTodoForm.js","todo-app/todofunc.js","todo-app/todoList.js","todo-app/todoForm.js","todo-app/todo.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialValue","useState","state","setState","initialInterval","value","setValue","e","target","EditForm","editTodo","id","task","toggleEdit","useInputState","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","Todo","completed","removeTodo","toggleTodo","useToggleState","isEditing","toggle","ListItem","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","todos","length","Paper","List","map","todo","i","key","Divider","TodoForm","addTodo","padding","label","TodoApp","initialTodos","JSON","parse","window","localStorage","getItem","setTodos","useEffect","setItem","stringify","document","title","backgroundColor","elevation","AppBar","color","position","Typography","Grid","container","justify","marginTop","item","xs","mg","lg","addNewTodo","uuid","todoId","updatedTodo","filter","newTask","updateTodo","App","className","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"maASeA,MAPf,YAA2C,IAAD,IAAtBC,oBAAsB,WACZC,mBAASD,GADG,mBAC/BE,EAD+B,KACxBC,EADwB,KAKtC,MAAM,CAACD,EAAOC,I,SCLH,WAAAC,GAAoB,IAAD,EACJH,mBAASG,GADL,mBACvBC,EADuB,KAChBC,EADgB,KAS9B,MAAO,CAACD,EAPa,SAAAE,GACjBD,EAASC,EAAEC,OAAOH,QAER,WACVC,EAAS,OCgBFG,MApBf,YAAiD,IAA9BC,EAA6B,EAA7BA,SAASC,EAAoB,EAApBA,GAAGC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,WAAY,EACTC,EAAcF,GADL,mBACrCP,EADqC,KAC/BU,EAD+B,KAClBC,EADkB,KAE7C,OACC,0BAAMC,SAAU,SAACV,GACbA,EAAEW,iBACFR,EAASC,EAAGN,GACZW,IACAH,KACDM,MAAO,CAACC,WAAY,OAAQC,MAAO,SAC/B,kBAACC,EAAA,EAAD,CACHC,OAAO,SACPlB,MAAOA,EACPmB,SAAUT,EACVU,WAAS,EACTC,WAAS,MCmBFC,MAzBf,YAAyE,IAAzDhB,EAAwD,EAAxDA,GAAIC,EAAoD,EAApDA,KAAMgB,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,WAAWpB,EAAY,EAAZA,SAAY,EACzCqB,GAAe,GAD0B,mBAC7DC,EAD6D,KACnDC,EADmD,KAEpE,OACI,kBAACC,EAAA,EAAD,CAAUf,MAAO,CAACgB,OAAQ,SACrBH,EAAa,kBAAC,EAAD,CAAUtB,SAAUA,EAAUC,GAAIA,EAAIC,KAAMA,EAAMC,WAAYoB,IACxE,oCACA,kBAACG,EAAA,EAAD,CAAUC,UAAW,EAAGC,QAASV,EAAWW,QAAS,kBAAMT,EAAWnB,MACtE,kBAAC6B,EAAA,EAAD,CAAcrB,MAAO,CAAEsB,eAAgBb,EAAY,eAAiB,SAC/DhB,EACD,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,aAAW,SAASL,QAAS,kBAAMV,EAAWlB,KACtD,kBAAC,IAAD,OAEJ,kBAACgC,EAAA,EAAD,CAAYC,aAAW,OAAOL,QAASN,GACnC,kBAAC,IAAD,YCIbY,MAzBf,YAA8D,IAA3CC,EAA0C,EAA1CA,MAAOjB,EAAmC,EAAnCA,WAAcC,GAAqB,EAAxBnB,GAAwB,EAArBmB,YAAWpB,EAAU,EAAVA,SAC/C,OAAGoC,EAAMC,OAEP,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAECH,EAAMI,KAAI,SAACC,EAAKC,GAAN,OACX,oCACC,kBAAC,EAAD,CACAzC,GAAIwC,EAAKxC,GACRC,KAAMuC,EAAKvC,KACVyC,IAAKF,EAAKxC,GACTiB,UAAWuB,EAAKvB,UAChBC,WAAYA,EACZC,WAAYA,EACZpB,SAAUA,IAEZ0C,EAAID,EAAKJ,OAAQ,GAAK,kBAACO,EAAA,EAAD,YAMvB,MCHIC,MApBf,YAA6B,IAAVC,EAAS,EAATA,QAAS,EACa1C,EAAc,IAD3B,mBACjBT,EADiB,KACVU,EADU,KACIC,EADJ,KAEzB,OACI,kBAACgC,EAAA,EAAD,CAAO7B,MAAO,CAACI,OAAQ,SAAUkC,QAAS,WACtC,0BAAMxC,SAAU,SAAAV,GACZA,EAAEW,iBACFsC,EAAQnD,GACRW,MAEJ,kBAACM,EAAA,EAAD,CACCjB,MAAOA,EACPmB,SAAUT,EACVQ,OAAQ,SACRmC,MAAO,eACPjC,WAAS,O,iBCyDNkC,MAlEf,WACI,IAAMC,EAAeC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UAAY,MAD1D,EAGYhE,mBAAS2D,GAHrB,mBAGPd,EAHO,KAGAoB,EAHA,KAqCd,OALAC,qBAAU,WAEJJ,OAAOC,aAAaI,QAAQ,QAASP,KAAKQ,UAAUvB,IACtDwB,SAASC,MAAT,aACD,CAACzB,IAEA,kBAACE,EAAA,EAAD,CAAO7B,MAAO,CACVsC,QAAS,EACTlC,OAAQ,EACRY,OAAQ,QACRqC,gBAAiB,WAClBC,UAAW,GAEd,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAASzD,MAAO,CAACgB,OAAQ,SACtD,kBAAC,IAAD,KACI,kBAAC0C,EAAA,EAAD,CAAYF,MAAM,WAAlB,sBAKR,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS7D,MAAO,CAAC8D,UAAW,SAClD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC9B,kBAAC,EAAD,CAAU7B,QAhDA,SAAA8B,GACZpB,EAAS,GAAD,mBAAKpB,GAAL,CAAY,CAACnC,GAAI4E,MAAQ3E,KAAM0E,EAAY1D,WAAW,SAgD5D,kBAAC,EAAD,CACAkB,MAAOA,EACNjB,WA/CY,SAAA2D,GAEf,IAAMC,EAAc3C,EAAM4C,QAAO,SAAAvC,GAAI,OAAIA,EAAKxC,KAAO6E,KAErDtB,EAASuB,IA4CN3D,WAxCW,SAAA0D,GACf,IAAMC,EAAc3C,EAAMI,KAAI,SAAAC,GAAI,OAC9BA,EAAKxC,KAAO6E,EAAZ,2BAAyBrC,GAAzB,IAA+BvB,WAAYuB,EAAKvB,YAAauB,KAEjEe,EAASuB,IAqCL/E,SAlCU,SAAC8E,EAAQG,GACtB,IAAMC,EAAa9C,EAAMI,KAAI,SAAAC,GAAI,OAC7BA,EAAKxC,KAAO6E,EAAZ,2BAAyBrC,GAAzB,IAA+BvC,KAAM+E,IAAWxC,KAEhDe,EAAS0B,UCzBNC,E,uKARX,OACE,yBAAKC,UAAU,OACd,kBAAC,EAAD,W,GAJWC,aCQEC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d77cc0e7.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction useToggle({initialValue = false}){\r\n    const [state, setState] = useState(initialValue);\r\n    const handleToggle = () => {\r\n        setState(!state);\r\n    };\r\n    return[state, setState];\r\n}\r\nexport default useToggle;","import React, {useState} from 'react';\r\n\r\nexport default initialInterval => {\r\n    const [value, setValue] = useState(initialInterval);\r\n    const handleChange = e => {\r\n        setValue(e.target.value);\r\n    };\r\n    const reset = () => {\r\n        setValue(\"\");\r\n    }; \r\n\r\n    return [value, handleChange, reset];\r\n};","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport useInputState from './hooks/useInputState';\r\n\r\nfunction EditForm({editTodo,id,task,toggleEdit}){\r\n    const [value,handleChange,reset] = useInputState(task);\r\n   return(\r\n    <form onSubmit={(e) => {\r\n        e.preventDefault();\r\n        editTodo(id,value);\r\n        reset();\r\n        toggleEdit();\r\n    }} style={{marginLeft: \"1rem\", width: '100%'}}>\r\n           <TextField\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        autoFocus\r\n       />\r\n    </form>\r\n   )\r\n\r\n}\r\nexport default EditForm;","import React, { useState } from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport useToggleState from './hooks/useToggleState';\r\nimport EditForm from './editTodoForm';\r\n\r\n\r\nfunction Todo({ id, task, completed, removeTodo, toggleTodo,editTodo }) {\r\n    const [isEditing,toggle] = useToggleState(false);\r\n    return (\r\n        <ListItem style={{height: '64px'}}>\r\n            {isEditing ? (<EditForm editTodo={editTodo} id={id} task={task} toggleEdit={toggle} />) : (\r\n                <>\r\n                <Checkbox tabIndex={-1} checked={completed} onClick={() => toggleTodo(id)} />\r\n                <ListItemText style={{ textDecoration: completed ? \"line-through\" : \"none\" }}>\r\n                    {task}\r\n                    <ListItemSecondaryAction>\r\n                        <IconButton aria-label=\"Delete\" onClick={() => removeTodo(id)}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n                            <EditIcon />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                </ListItemText>\r\n                </>\r\n\r\n            )}\r\n        </ListItem>\r\n\r\n    )\r\n}\r\nexport default Todo;","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Todo from './todofunc';\r\nfunction TodoList({todos, removeTodo,id,toggleTodo,editTodo}){\r\n    if(todos.length)\r\n    return(\r\n      <Paper>\r\n          <List>\r\n              {/*map through the todos and create a list for each*/}\r\n          {todos.map((todo,i) => (\r\n          <> \r\n           <Todo\r\n           id={todo.id}\r\n            task={todo.task}\r\n             key={todo.id}\r\n              completed={todo.completed}\r\n              removeTodo={removeTodo}\r\n              toggleTodo={toggleTodo}\r\n              editTodo={editTodo}\r\n               />\r\n           {i < todo.length -1 && <Divider/>}\r\n          </>\r\n       ))}\r\n          </List>\r\n      </Paper>\r\n    );\r\n    return null;\r\n}\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport useInputState from './hooks/useInputState';\r\n\r\nfunction TodoForm({addTodo}){\r\n    const [value, handleChange, reset] = useInputState(\"\");\r\n   return (\r\n       <Paper style={{margin: \"1rem 0\", padding: \"0 1rem\"}}>\r\n           <form onSubmit={e => {\r\n               e.preventDefault();\r\n               addTodo(value);\r\n               reset();\r\n           }}>\r\n           <TextField\r\n            value={value} \r\n            onChange={handleChange}\r\n            margin= \"normal\"\r\n            label= \"Add new todo\"\r\n            fullWidth\r\n            />\r\n           </form>\r\n       </Paper>\r\n   )\r\n}\r\nexport default TodoForm;\r\n","import React, {useState, useEffect} from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TodoList from './todoList';\r\nimport TodoForm from './todoForm';\r\nimport uuid from 'uuid/v4';\r\n\r\nfunction TodoApp(){\r\n    const initialTodos = JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\");\r\n    //create todos and set a function for update 'setTodos' the \"setState\"\r\n    const [todos, setTodos] = useState(initialTodos);\r\n\r\n    //adds new todos to the form\r\n    const addTodo = addNewTodo => {\r\n        setTodos([...todos, {id: uuid(), task: addNewTodo, completed: false}]);\r\n    }\r\n\r\n    const removeTodo = todoId => {\r\n        //filter out removed todo\r\n        const updatedTodo = todos.filter(todo => todo.id !== todoId);\r\n        //call setTodo with new todo array\r\n        setTodos(updatedTodo);\r\n    }\r\n\r\n    //for the checkbo\r\n   const toggleTodo = todoId => {\r\n       const updatedTodo = todos.map(todo => \r\n           todo.id === todoId ? {...todo, completed: !todo.completed} : todo\r\n       );\r\n       setTodos(updatedTodo);\r\n   };\r\n    //for editing the todo\r\n    const editTodo = (todoId, newTask) => {\r\n        const updateTodo = todos.map(todo => \r\n            todo.id === todoId ? {...todo, task: newTask} : todo\r\n            )\r\n            setTodos(updateTodo);\r\n    }\r\n    //useEffect for localStorage\r\n    useEffect(() => {\r\n          //localStorage\r\n          window.localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n        document.title = `Todo App`;\r\n    }, [todos])\r\n    return ( \r\n        <Paper style={{\r\n            padding: 0,\r\n            margin: 0,\r\n            height: \"100vh\",\r\n            backgroundColor: \"#fafafa\"\r\n        }} elevation={0}>\r\n\r\n        <AppBar color=\"primary\" position=\"static\" style={{height: \"64px\"}}>\r\n            <ToolBar>\r\n                <Typography color=\"inherit\">\r\n                    TODOS WITH HOOKS\r\n                </Typography>\r\n            </ToolBar>\r\n        </AppBar>\r\n        <Grid container justify=\"center\" style={{marginTop: \"1rem\"}}>\r\n          <Grid item xs={11} mg={8} lg={4}>\r\n          <TodoForm addTodo={addTodo}/>\r\n          <TodoList \r\n          todos={todos} \r\n           removeTodo={removeTodo}\r\n           toggleTodo={toggleTodo}\r\n           editTodo={editTodo}\r\n           />\r\n          </Grid>\r\n        </Grid>\r\n        </Paper>\r\n    );\r\n}\r\nexport default TodoApp;","import React, {Component} from 'react';\nimport TodoApp from './todo-app/todo';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <TodoApp/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}